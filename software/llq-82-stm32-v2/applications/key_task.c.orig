/*
 * @author                          : Seasky.Liu
 * @Date                            : 2021-11-22 14:56:36
 * @LastEditTime                    : 2022-01-04 16:11
 * @LastEditors                     : your name
 * @Description                     : https://github.com/SEASKY-Master
 * @FilePath                        : \keyboard_v6\applications\key_task.c
 * @symbol_custom_string_obkoro1    :
 * 版权所有:@Seasky.liu
 * 联系方式:liuwei_seasky@163.com
 * 开源协议:请遵从开源协议（项目仓库中有说明），未经作者允许、严禁用于商业用途
 * ************************************************************************
 *            If you want a thing done well, do it yourself.
 * ************************************************************************
 */

#include "key_task.h"
#include "FreeRTOS.h"
#include "task.h"
#include "cmsis_os.h"

#include "tim.h"
#include "bsp_interface.h"

static void key_scan_task(void const *pvParameters);
enc_key key_enc_info; //编码器按键信息
static uint8_t key_count, key[2];
static osThreadId key_sacn_TaskHandle;
uint8_t key_task_scan(mx_key_task_info key_scan_t)
{
    if (HAL_GPIO_ReadPin(key_scan_t.key_gpio, key_scan_t.key_gpio_pin) == KEY_TASK_PRESS_LEVEL)
    {
        return KEY_TASK_PRESS_S;
    }
    return KEY_TASK_UPSPRING_S;
}
//使用之后清除状态
uint8_t get_click_state_num_clark(mx_key_task_info *click_state_t)
{
    uint8_t state = 0;
    state = click_state_t->key_info.click_state_num;
    click_state_t->key_info.click_state_num = 0;
    return state;
}
void key_task_creat(void)
{
    osThreadDef(key_task, key_scan_task, osPriorityRealtime, 0, 128);
    key_sacn_TaskHandle = osThreadCreate(osThread(key_task), NULL);
}

void key_scan_task(void const *pvParameters)
{
    TickType_t peroid = osKernelSysTick();
    //开启编码器
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
    //开始按键扫描定时器
    __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
    HAL_TIM_Base_Start(&htim1);
    //初始化编码器按键扫描
    key_enc_info.key_t[0].key_gpio = LEFT_KEY_GPIO_Port;
    key_enc_info.key_t[0].key_gpio_pin = LEFT_KEY_Pin;
    key_enc_info.key_t[1].key_gpio = SW_KEY_NET2_GPIO_Port;
    key_enc_info.key_t[1].key_gpio_pin = SW_KEY_NET2_Pin;
    key_enc_info.get_click_state_num = get_click_state_num_clark;
    while (1)
    {
        //更新编码器
        key_enc_info.encoder_t[0].enc_t = (uint32_t)(__HAL_TIM_GET_COUNTER(&htim3)) / 2;
        key_enc_info.encoder_t[0].dir = (uint32_t)(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3));
        key_enc_info.encoder_t[1].enc_t = (uint32_t)(__HAL_TIM_GET_COUNTER(&htim2)) / 2;
        key_enc_info.encoder_t[1].dir = (uint32_t)(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2));
		if(key_enc_info.get_click_state_num(&key_enc_info.key_t[1])==5)
		{
			sys_enter_stop();
		}
        osDelayUntil(&peroid, KEY_TASK_TIME_CYCLE); //任务延时
    }
}


void enc_key_scanf(void)
{
        for (key_count = 0; key_count < MAX_KEY_NUM; key_count++)
        {
            //读取按键电平
            key[key_count] = key_task_scan(key_enc_info.key_t[key_count]);
            if (key[key_count] == KEY_TASK_PRESS_S)
            {
                //按键按下计数
                if (key_enc_info.key_t[key_count].key_info.time_count < KEY_PRESS_MAX_COUNT)
                {
                    key_enc_info.key_t[key_count].key_info.time_count++;
                }
            }
            else
            {
                //按键弹起计数
                if (key_enc_info.key_t[key_count].key_info.res_count < KEY_RES_MAX_COUNT)
                {
                    key_enc_info.key_t[key_count].key_info.res_count++;
                }
            }
            //到达长按时间
            if (key_enc_info.key_t[key_count].key_info.time_count >= KEY_TASK_TIME_L_COUNT)
            {
                if (key_enc_info.key_t[key_count].key_info.states == KEY_TASK_PRESS)
                {
                    key_enc_info.key_t[key_count].key_info.states = KEY_TASK_PRESS_L_TIME;
                    key_enc_info.key_t[key_count].key_info.click_num = 0;
                    key_enc_info.key_t[key_count].key_info.click_state_num = 0;
                    //按键复位计数清零
                    key_enc_info.key_t[key_count].key_info.res_count = 0;
                }
            }
            //短按时间
            else if (key_enc_info.key_t[key_count].key_info.time_count >= KEY_TASK_TIME_P_COUNT)
            {
                //首次更新按键事件
                if (key_enc_info.key_t[key_count].key_info.states == KEY_TASK_UPSPRING)
                {
                    key_enc_info.key_t[key_count].key_info.states = KEY_TASK_PRESS;
                    //记录按键按下次数
                    if (key_enc_info.key_t[key_count].key_info.click_num < KEY_MAX_NUM)
                    {
                        key_enc_info.key_t[key_count].key_info.click_num++;
                    }
                    //按键复位计数清零
                    key_enc_info.key_t[key_count].key_info.res_count = 0;
                }
            }
            //连续按超时
            if (key_enc_info.key_t[key_count].key_info.res_count >= KEY_RES_NUM_COUNT)
            {
                if (key_enc_info.key_t[key_count].key_info.click_num != 0)
                {
                    key_enc_info.key_t[key_count].key_info.click_state_num =
                        key_enc_info.key_t[key_count].key_info.click_num;
                    key_enc_info.key_t[key_count].key_info.click_num = 0;
                }
            }
            //按键复位弹起
            else if (key_enc_info.key_t[key_count].key_info.res_count >= KEY_RES_COUNT)
            {
                if (key_enc_info.key_t[key_count].key_info.states != KEY_TASK_UPSPRING)
                {
                    key_enc_info.key_t[key_count].key_info.states = KEY_TASK_UPSPRING; //按键弹起复位
                    //按键按下计数清零
                    key_enc_info.key_t[key_count].key_info.time_count = 0; //按键计数清零
                }
            }
        }
}